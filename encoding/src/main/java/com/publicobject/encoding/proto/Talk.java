// Code generated by Wire protocol buffer compiler, do not edit.
// Source file: talk.proto at 5:1
package com.publicobject.encoding.proto;

import com.squareup.wire.FieldEncoding;
import com.squareup.wire.Message;
import com.squareup.wire.ProtoAdapter;
import com.squareup.wire.ProtoReader;
import com.squareup.wire.ProtoWriter;
import com.squareup.wire.WireEnum;
import com.squareup.wire.WireField;
import com.squareup.wire.internal.Internal;
import java.io.IOException;
import okio.ByteString;

public final class Talk extends Message<Talk, Talk.Builder> {
  public static final ProtoAdapter<Talk> ADAPTER = new ProtoAdapter_Talk();

  private static final long serialVersionUID = 0L;

  public static final Integer DEFAULT_ID = 0;

  public static final Long DEFAULT_DATE = 0L;

  public static final Room DEFAULT_ROOM = Room.UP;

  public static final String DEFAULT_TITLE = "";

  public static final String DEFAULT_SPEAKER = "";

  @WireField(
      tag = 1,
      adapter = "com.squareup.wire.ProtoAdapter#FIXED32"
  )
  public final Integer id;

  @WireField(
      tag = 2,
      adapter = "com.squareup.wire.ProtoAdapter#FIXED64"
  )
  public final Long date;

  @WireField(
      tag = 3,
      adapter = "squareup.droidcon.Talk$Room#ADAPTER"
  )
  public final Room room;

  @WireField(
      tag = 4,
      adapter = "com.squareup.wire.ProtoAdapter#STRING"
  )
  public final String title;

  @WireField(
      tag = 5,
      adapter = "com.squareup.wire.ProtoAdapter#STRING"
  )
  public final String speaker;

  public Talk(Integer id, Long date, Room room, String title, String speaker) {
    this(id, date, room, title, speaker, ByteString.EMPTY);
  }

  public Talk(Integer id, Long date, Room room, String title, String speaker, ByteString unknownFields) {
    super(ADAPTER, unknownFields);
    this.id = id;
    this.date = date;
    this.room = room;
    this.title = title;
    this.speaker = speaker;
  }

  @Override
  public Builder newBuilder() {
    Builder builder = new Builder();
    builder.id = id;
    builder.date = date;
    builder.room = room;
    builder.title = title;
    builder.speaker = speaker;
    builder.addUnknownFields(unknownFields());
    return builder;
  }

  @Override
  public boolean equals(Object other) {
    if (other == this) return true;
    if (!(other instanceof Talk)) return false;
    Talk o = (Talk) other;
    return unknownFields().equals(o.unknownFields())
        && Internal.equals(id, o.id)
        && Internal.equals(date, o.date)
        && Internal.equals(room, o.room)
        && Internal.equals(title, o.title)
        && Internal.equals(speaker, o.speaker);
  }

  @Override
  public int hashCode() {
    int result = super.hashCode;
    if (result == 0) {
      result = unknownFields().hashCode();
      result = result * 37 + (id != null ? id.hashCode() : 0);
      result = result * 37 + (date != null ? date.hashCode() : 0);
      result = result * 37 + (room != null ? room.hashCode() : 0);
      result = result * 37 + (title != null ? title.hashCode() : 0);
      result = result * 37 + (speaker != null ? speaker.hashCode() : 0);
      super.hashCode = result;
    }
    return result;
  }

  @Override
  public String toString() {
    StringBuilder builder = new StringBuilder();
    if (id != null) builder.append(", id=").append(id);
    if (date != null) builder.append(", date=").append(date);
    if (room != null) builder.append(", room=").append(room);
    if (title != null) builder.append(", title=").append(title);
    if (speaker != null) builder.append(", speaker=").append(speaker);
    return builder.replace(0, 2, "Talk{").append('}').toString();
  }

  public static final class Builder extends Message.Builder<Talk, Builder> {
    public Integer id;

    public Long date;

    public Room room;

    public String title;

    public String speaker;

    public Builder() {
    }

    public Builder id(Integer id) {
      this.id = id;
      return this;
    }

    public Builder date(Long date) {
      this.date = date;
      return this;
    }

    public Builder room(Room room) {
      this.room = room;
      return this;
    }

    public Builder title(String title) {
      this.title = title;
      return this;
    }

    public Builder speaker(String speaker) {
      this.speaker = speaker;
      return this;
    }

    @Override
    public Talk build() {
      return new Talk(id, date, room, title, speaker, super.buildUnknownFields());
    }
  }

  public enum Room implements WireEnum {
    UP(1),

    RIGHT(2),

    DOWN(3),

    LEFT(4);

    public static final ProtoAdapter<Room> ADAPTER = ProtoAdapter.newEnumAdapter(Room.class);

    private final int value;

    Room(int value) {
      this.value = value;
    }

    /**
     * Return the constant for {@code value} or null.
     */
    public static Room fromValue(int value) {
      switch (value) {
        case 1: return UP;
        case 2: return RIGHT;
        case 3: return DOWN;
        case 4: return LEFT;
        default: return null;
      }
    }

    @Override
    public int getValue() {
      return value;
    }
  }

  private static final class ProtoAdapter_Talk extends ProtoAdapter<Talk> {
    public ProtoAdapter_Talk() {
      super(FieldEncoding.LENGTH_DELIMITED, Talk.class);
    }

    @Override
    public int encodedSize(Talk value) {
      return ProtoAdapter.FIXED32.encodedSizeWithTag(1, value.id)
          + ProtoAdapter.FIXED64.encodedSizeWithTag(2, value.date)
          + Room.ADAPTER.encodedSizeWithTag(3, value.room)
          + ProtoAdapter.STRING.encodedSizeWithTag(4, value.title)
          + ProtoAdapter.STRING.encodedSizeWithTag(5, value.speaker)
          + value.unknownFields().size();
    }

    @Override
    public void encode(ProtoWriter writer, Talk value) throws IOException {
      ProtoAdapter.FIXED32.encodeWithTag(writer, 1, value.id);
      ProtoAdapter.FIXED64.encodeWithTag(writer, 2, value.date);
      Room.ADAPTER.encodeWithTag(writer, 3, value.room);
      ProtoAdapter.STRING.encodeWithTag(writer, 4, value.title);
      ProtoAdapter.STRING.encodeWithTag(writer, 5, value.speaker);
      writer.writeBytes(value.unknownFields());
    }

    @Override
    public Talk decode(ProtoReader reader) throws IOException {
      Builder builder = new Builder();
      long token = reader.beginMessage();
      for (int tag; (tag = reader.nextTag()) != -1;) {
        switch (tag) {
          case 1: builder.id(ProtoAdapter.FIXED32.decode(reader)); break;
          case 2: builder.date(ProtoAdapter.FIXED64.decode(reader)); break;
          case 3: {
            try {
              builder.room(Room.ADAPTER.decode(reader));
            } catch (ProtoAdapter.EnumConstantNotFoundException e) {
              builder.addUnknownField(tag, FieldEncoding.VARINT, (long) e.value);
            }
            break;
          }
          case 4: builder.title(ProtoAdapter.STRING.decode(reader)); break;
          case 5: builder.speaker(ProtoAdapter.STRING.decode(reader)); break;
          default: {
            FieldEncoding fieldEncoding = reader.peekFieldEncoding();
            Object value = fieldEncoding.rawProtoAdapter().decode(reader);
            builder.addUnknownField(tag, fieldEncoding, value);
          }
        }
      }
      reader.endMessage(token);
      return builder.build();
    }

    @Override
    public Talk redact(Talk value) {
      Builder builder = value.newBuilder();
      builder.clearUnknownFields();
      return builder.build();
    }
  }
}
